{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 90,
   "id": "46237c47-59ad-44b5-b33b-4616ba12b792",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Berhasil terkoneksi\n"
     ]
    }
   ],
   "source": [
    "import psycopg2\n",
    "\n",
    "try:\n",
    "    db5 = psycopg2.connect('''user='postgres'\n",
    "                               password='2023'\n",
    "                               dbname='jne'\n",
    "                               host='localhost'\n",
    "                               port=5432''')\n",
    "    print (\"Berhasil terkoneksi\")\n",
    "except:\n",
    "    print (\"Tidak dapat terkoneksi dengan database\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1ce0d5ce-72d0-4111-869b-09978f29cae3",
   "metadata": {},
   "source": [
    "# Make Simple Data "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "id": "c09a66b1-c517-4e0d-b0b7-5433ca741c92",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Table created successfully........\n"
     ]
    }
   ],
   "source": [
    "cursor = db5.cursor()\n",
    " \n",
    "# Doping EMPLOYEE table if already exists.\n",
    "cursor.execute(\"DROP TABLE IF EXISTS publisher\")\n",
    " \n",
    "# Creating table as per requirement\n",
    "sql = '''CREATE TABLE PUBLISHER(\n",
    "                publisher_id SERIAL PRIMARY KEY,\n",
    "                publisher_name VARCHAR(255) NOT NULL,\n",
    "                publisher_estd INT,\n",
    "                publsiher_location VARCHAR(255),\n",
    "                publsiher_type VARCHAR(255)\n",
    ")'''\n",
    "cursor.execute(sql)\n",
    "print(\"Table created successfully........\")\n",
    "db5.commit()\n",
    " \n",
    "# Closing the connection\n",
    "db5.close()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7ad2194b-b499-444a-9d51-e47697ea1d56",
   "metadata": {},
   "source": [
    "# Input Simple Data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "id": "ee419f76-446a-413a-85ed-025c041225b6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1 Record inserted successfully \tinto publisher table\n",
      "PostgreSQL connection is closed\n"
     ]
    }
   ],
   "source": [
    "import psycopg2\n",
    "\n",
    "\n",
    "try:\n",
    "\tconn = psycopg2.connect(user=\"postgres\",\n",
    "\t\t\t\t\t\t\t\tpassword=\"2023\",\n",
    "\t\t\t\t\t\t\t\thost=\"localhost\",\n",
    "\t\t\t\t\t\t\t\tport=\"5432\",\n",
    "\t\t\t\t\t\t\t\tdatabase=\"jne\")\n",
    "\tcursor = conn.cursor()\n",
    "\n",
    "\tpostgres_insert_query = \"\"\" INSERT INTO publisher(publisher_id,\n",
    "\tpublisher_name, publisher_estd, publsiher_location, publsiher_type)\n",
    "\tVALUES (%s,%s,%s,%s,%s)\"\"\"\n",
    "\trecord_to_insert = [(1, 'Packt', 1950,\n",
    "\t\t\t\t\t\t'chennai', 'books'),\n",
    "\t\t\t\t\t\t(2, 'Springer', 1950,\n",
    "\t\t\t\t\t\t'chennai', 'books'),\n",
    "\t\t\t\t\t\t(3, 'Springer', 1950,\n",
    "\t\t\t\t\t\t'chennai', 'articles'),\n",
    "\t\t\t\t\t\t(4, 'Oxford', 1950,\n",
    "\t\t\t\t\t\t'chennai', 'all'),\n",
    "\t\t\t\t\t\t(5, 'MIT', 1950,\n",
    "\t\t\t\t\t\t'chennai', 'books')]\n",
    "\tfor i in record_to_insert:\n",
    "\t\tcursor.execute(postgres_insert_query, i)\n",
    "\n",
    "\t\tconn.commit()\n",
    "\t\tcount = cursor.rowcount\n",
    "\tprint(count, \"Record inserted successfully \\\n",
    "\tinto publisher table\")\n",
    "\n",
    "except (Exception, psycopg2.Error) as error:\n",
    "\tprint(\"Failed to insert record into publisher table\", error)\n",
    "\n",
    "finally:\n",
    "\t# closing database connection.\n",
    "\tif conn:\n",
    "\t\tcursor.close()\n",
    "\t\tconn.close()\n",
    "\t\tprint(\"PostgreSQL connection is closed\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "57ac79be-26af-4303-9eac-823bd1255b2f",
   "metadata": {},
   "source": [
    "# Input Data from sources"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "id": "7cda5728-4191-461c-8609-3fdf47cb2ee0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "id                         int64\n",
       "first_name                object\n",
       "last_name                 object\n",
       "email                     object\n",
       "age                        int64\n",
       "gender                    object\n",
       "state                     object\n",
       "street_address            object\n",
       "postal_code               object\n",
       "city                      object\n",
       "country                   object\n",
       "latitude                  object\n",
       "longitude                 object\n",
       "traffic_source            object\n",
       "created_at        datetime64[ns]\n",
       "dtype: object"
      ]
     },
     "execution_count": 87,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "\n",
    "link_data = 'https://raw.githubusercontent.com/dsciencelabs/JNE_Data_Analytics_PySQL/main/data/data_latihan/users.csv'\n",
    "\n",
    "df1 = pd.read_csv(link_data, sep=';' )\n",
    "df1['created_at'] = pd.to_datetime(df1['created_at'])\n",
    "df1.dtypes"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dc9e4105-b30c-4cb8-9fc7-cfb5424f0909",
   "metadata": {},
   "source": [
    "# Step by step input data into PostgreSQL from Pandas dataframe"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "43e85383-0231-424a-95c0-c39297ec96a5",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Berhasil terkoneksi\n"
     ]
    },
    {
     "ename": "DuplicateTable",
     "evalue": "relation \"trial_data\" already exists\n",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mDuplicateTable\u001b[0m                            Traceback (most recent call last)",
      "Cell \u001b[1;32mIn [88], line 61\u001b[0m\n\u001b[0;32m     59\u001b[0m \u001b[38;5;66;03m# creating a cursor\u001b[39;00m\n\u001b[0;32m     60\u001b[0m cursor \u001b[38;5;241m=\u001b[39m db5\u001b[38;5;241m.\u001b[39mcursor()\n\u001b[1;32m---> 61\u001b[0m cursor\u001b[38;5;241m.\u001b[39mexecute(sql)\n\u001b[0;32m     62\u001b[0m data \u001b[38;5;241m=\u001b[39m df1\n\u001b[0;32m     64\u001b[0m data \u001b[38;5;241m=\u001b[39m data[[\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mid\u001b[39m\u001b[38;5;124m\"\u001b[39m, \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mfirst_name\u001b[39m\u001b[38;5;124m\"\u001b[39m, \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mlast_name\u001b[39m\u001b[38;5;124m\"\u001b[39m, \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124memail\u001b[39m\u001b[38;5;124m\"\u001b[39m, \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mage\u001b[39m\u001b[38;5;124m\"\u001b[39m, \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mgender\u001b[39m\u001b[38;5;124m\"\u001b[39m, \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mstate\u001b[39m\u001b[38;5;124m\"\u001b[39m, \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mstreet_address\u001b[39m\u001b[38;5;124m\"\u001b[39m,\n\u001b[0;32m     65\u001b[0m             \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mpostal_code\u001b[39m\u001b[38;5;124m\"\u001b[39m, \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mcity\u001b[39m\u001b[38;5;124m\"\u001b[39m, \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mcountry\u001b[39m\u001b[38;5;124m\"\u001b[39m, \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mlatitude\u001b[39m\u001b[38;5;124m\"\u001b[39m, \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mlongitude\u001b[39m\u001b[38;5;124m\"\u001b[39m, \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mtraffic_source\u001b[39m\u001b[38;5;124m\"\u001b[39m, \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mcreated_at\u001b[39m\u001b[38;5;124m\"\u001b[39m]]\n",
      "\u001b[1;31mDuplicateTable\u001b[0m: relation \"trial_data\" already exists\n"
     ]
    }
   ],
   "source": [
    "import psycopg2\n",
    "\n",
    "try:\n",
    "    db5 = psycopg2.connect('''user='postgres'\n",
    "                               password='2023'\n",
    "                               dbname='jne'\n",
    "                               host='localhost'\n",
    "                               port=5432''')\n",
    "    print (\"Berhasil terkoneksi\")\n",
    "except:\n",
    "    print (\"Tidak dapat terkoneksi dengan database\")\n",
    "    \n",
    "# import packages\n",
    "import psycopg2\n",
    "import psycopg2.extras as extras\n",
    "import pandas as pd\n",
    "\n",
    "\n",
    "def execute_values(db5, df, table):\n",
    "\n",
    "\ttuples = [tuple(x) for x in df.to_numpy()]\n",
    "\n",
    "\tcols = ','.join(list(df.columns))\n",
    "\n",
    "\t# SQL query to execute\n",
    "\tquery = \"INSERT INTO %s(%s) VALUES %%s\" % (table, cols)\n",
    "\tcursor = db5.cursor()\n",
    "\ttry:\n",
    "\t\textras.execute_values(cursor, query, tuples)\n",
    "\t\tdb5.commit()\n",
    "\texcept (Exception, psycopg2.DatabaseError) as error:\n",
    "\t\tprint(\"Error: %s\" % error)\n",
    "\t\tdb5.rollback()\n",
    "\t\tcursor.close()\n",
    "\t\treturn 1\n",
    "\tprint(\"execute_values() done\")\n",
    "\tcursor.close()\n",
    "\n",
    "\n",
    "\n",
    "sql = '''CREATE TABLE trial_data(\n",
    "                id SERIAL PRIMARY KEY,\n",
    "                first_name VARCHAR(255) NOT NULL,\n",
    "                last_name VARCHAR(255) NOT NULL,\n",
    "                email VARCHAR(255) NOT NULL,\n",
    "                age INT,\n",
    "                gender Varchar (10) check (gender in ('F','M')),\n",
    "                state VARCHAR(255) NOT NULL,\n",
    "                street_address VARCHAR(255) NOT NULL,\n",
    "                postal_code VARCHAR(255) NOT NULL,\n",
    "                city VARCHAR(255) NOT NULL,\n",
    "                country VARCHAR(255) NOT NULL,\n",
    "                latitude VARCHAR(255) NOT NULL,\n",
    "                longitude VARCHAR(255) NOT NULL,\n",
    "                traffic_source VARCHAR(255) NOT NULL,\n",
    "                created_at VARCHAR(255) NOT NULL\n",
    ")'''\n",
    "\n",
    "# creating a cursor\n",
    "cursor = db5.cursor()\n",
    "cursor.execute(sql)\n",
    "data = df1\n",
    "\n",
    "data = data[[\"id\", \"first_name\", \"last_name\", \"email\", \"age\", \"gender\", \"state\", \"street_address\",\n",
    "            \"postal_code\", \"city\", \"country\", \"latitude\", \"longitude\", \"traffic_source\", \"created_at\"]]\n",
    "\n",
    "# using the function defined\n",
    "execute_values(db5, data, 'trial_data')\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "68a89860-161c-4954-906a-5b4e52460f23",
   "metadata": {},
   "source": [
    "# Shortcut input data from pandas"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "id": "547dd131-3d90-4ce7-b233-b6b3e079bc40",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "500"
      ]
     },
     "execution_count": 74,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "from sqlalchemy import create_engine\n",
    "import psycopg2\n",
    "engine = create_engine('postgresql://postgres:2023@localhost:5432/jne')\n",
    "\n",
    "df1.to_sql(\"table_name\", engine)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "92fc1610-2b51-4459-b724-2057a3582a7a",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
